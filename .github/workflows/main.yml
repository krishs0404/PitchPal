name: Email Summarizer CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api_service, vector_service, ml_service]
        include:
          - service: api_service
            directory: services/api_service
          - service: vector_service
            directory: services/vector_service
          - service: ml_service
            directory: services/ml_service

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f ${{ matrix.directory }}/requirements.txt ]; then pip install -r ${{ matrix.directory }}/requirements.txt; fi
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        cd ${{ matrix.directory }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Test with pytest
      run: |
        cd ${{ matrix.directory }}
        pytest --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.directory }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd frontend/next-app
        npm ci
        
    - name: Lint
      run: |
        cd frontend/next-app
        npm run lint
        
    - name: Build
      run: |
        cd frontend/next-app
        npm run build

  build-and-push:
    name: Build and Push Docker Images
    needs: [test, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        service: [api_service, vector_service, ml_service, frontend]
        include:
          - service: api_service
            directory: services/api_service
            dockerfile: infrastructure/docker/Dockerfile.api
            ecr_repository: email-summarizer-api
          - service: vector_service
            directory: services/vector_service
            dockerfile: infrastructure/docker/Dockerfile.vector
            ecr_repository: email-summarizer-vector
          - service: ml_service
            directory: services/ml_service
            dockerfile: infrastructure/docker/Dockerfile.ml
            ecr_repository: email-summarizer-ml
          - service: frontend
            directory: frontend/next-app
            dockerfile: infrastructure/docker/Dockerfile.frontend
            ecr_repository: email-summarizer-frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-west-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.directory }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repository }}:latest
          ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repository }}:${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-west-2
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name email-summarizer-cluster --region us-west-2
        
    - name: Get ECR registry URL
      id: ecr
      run: |
        echo "::set-output name=registry::$(aws ecr describe-repositories --repository-names email-summarizer-api --query 'repositories[0].repositoryUri' --output text | sed 's/\/email-summarizer-api$//')"
        
    - name: Deploy to Kubernetes
      run: |
        # Replace ECR repository URL in Kubernetes manifests
        find ./infrastructure/k8s -type f -name "*.yaml" -exec sed -i "s|\${ECR_REPOSITORY_URL}|${{ steps.ecr.outputs.registry }}|g" {} \;
        
        # Apply Kubernetes manifests
        kubectl apply -f ./infrastructure/k8s/namespace.yaml
        kubectl apply -f ./infrastructure/k8s/secrets.yaml
        kubectl apply -f ./infrastructure/k8s/api-service.yaml
        kubectl apply -f ./infrastructure/k8s/vector-service.yaml
        kubectl apply -f ./infrastructure/k8s/ml-service.yaml
        kubectl apply -f ./infrastructure/k8s/frontend.yaml
        
    - name: Verify deployment
      run: |
        kubectl -n email-summarizer get pods
        echo "Deployment completed successfully"
        
    - name: Send notification to Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  monitor:
    name: Setup Monitoring
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure Sentry release
      uses: getsentry/action-release@v1
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: email-summarizer
      with:
        environment: staging
        version: ${{ github.sha }}
